/******************************************************
* Boost Software License - Version 1.0 - 2016/10/06
*
* Copyright (c) 2016 dorgon chang
* http://dorgon.horizon-studio.net/
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
**********************************************************/
#pragma once

#include "soci/values.h"
#include "soci/type-conversion-traits.h"

#include <tuple>


namespace soci
{


	template <typename T0, typename... Trest> struct
		type_conversion<std::tuple<T0, Trest...> >
	{
	public:
		typedef values base_type;

	private:

		template<std::size_t> struct int_ {}; // compile-time counter

		//end of loop
		static void from_base_impl(base_type const & in, indicator ind,
			std::tuple<T0, Trest...> & out, int_<0>)
		{
			in >> std::get<0>(out);
		}

		template<std::size_t I> static void from_base_impl(base_type const & in,
			indicator ind, std::tuple<T0, Trest...> & out, int_<I>)
		{
			from_base_impl(in, ind, out, int_<I - 1>());
			in >> std::get<I>(out);
		}


		//end of loop
		static void to_base_impl(std::tuple<T0, Trest...> const& in, indicator ind,
			base_type & out, int_<0>)
		{
			out << std::get<0>(in);
		}

		template<std::size_t I> static void to_base_impl(std::tuple<T0, Trest...> const& in,
			indicator ind, base_type & out, int_<I>)
		{
			to_base_impl(in, ind, out, int_<I - 1>());
			out << std::get<I>(in);
		}

	public:

		static void from_base(base_type const & in, indicator ind,
			std::tuple<T0, Trest...> & out)
		{
			from_base_impl(in, ind, out, int_<sizeof...(Trest)>());
		}


		static void to_base(std::tuple<T0> const& in,
			base_type & out, indicator & ind)
		{
			to_base_impl(in, ind, out, int_<sizeof...(Trest)>());
		}
	};

} // namespace soci




